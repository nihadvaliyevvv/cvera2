const { scrapeLinkedInProfile } = require('./src/lib/scraper/linkedin-scraper.ts');

async function testEnhancedScraper() {
  console.log('üöÄ Enhanced LinkedIn Scraper Test');
  console.log('================================');
  
  const testUrl = 'https://www.linkedin.com/in/musayevcreate';
  
  try {
    console.log(`üîç Testing URL: ${testUrl}`);
    console.log('‚è≥ Starting enhanced HTML scraping...');
    console.log('üìã This will open a browser window for debugging');
    
    const startTime = Date.now();
    const result = await scrapeLinkedInProfile(testUrl);
    const endTime = Date.now();
    
    console.log(`‚úÖ Scraping completed in ${endTime - startTime}ms`);
    console.log('================================');
    
    console.log('üìä EXTRACTED DATA:');
    console.log(`üë§ Name: "${result.name || 'NOT FOUND'}"`);
    console.log(`üíº Headline: "${result.headline || 'NOT FOUND'}"`);
    console.log(`üìç Location: "${result.location || 'NOT FOUND'}"`);
    console.log(`üìù About: ${result.about ? `"${result.about.substring(0, 100)}..."` : 'NOT FOUND'}`);
    
    console.log('\nüìà STATISTICS:');
    console.log(`üè¢ Experience entries: ${result.experience?.length || 0}`);
    console.log(`üéì Education entries: ${result.education?.length || 0}`);
    console.log(`üõ†Ô∏è Skills found: ${result.skills?.length || 0}`);
    
    if (result.experience && result.experience.length > 0) {
      console.log('\nüíº EXPERIENCE:');
      result.experience.forEach((exp, i) => {
        console.log(`${i + 1}. Position: "${exp.position}"`);
        console.log(`   Company: "${exp.company}"`);
        console.log(`   Description: "${exp.description ? exp.description.substring(0, 80) + '...' : 'None'}"`);
        console.log('');
      });
    }
    
    if (result.education && result.education.length > 0) {
      console.log('üéì EDUCATION:');
      result.education.forEach((edu, i) => {
        console.log(`${i + 1}. School: "${edu.school}"`);
        console.log(`   Degree: "${edu.degree}"`);
        console.log('');
      });
    }
    
    if (result.skills && result.skills.length > 0) {
      console.log(`üõ†Ô∏è SKILLS: ${result.skills.join(', ')}`);
    }
    
    console.log('\nüéâ Enhanced scraper test completed successfully!');
    
    // Validate results
    const hasBasicInfo = result.name || result.headline || result.about;
    const hasExperience = result.experience && result.experience.length > 0;
    const hasSkills = result.skills && result.skills.length > 0;
    
    console.log('\nüìã VALIDATION:');
    console.log(`‚úÖ Basic Info: ${hasBasicInfo ? 'FOUND' : 'MISSING'}`);
    console.log(`‚úÖ Experience: ${hasExperience ? 'FOUND' : 'MISSING'}`);
    console.log(`‚úÖ Skills: ${hasSkills ? 'FOUND' : 'MISSING'}`);
    
    if (!hasBasicInfo && !hasExperience && !hasSkills) {
      console.log('\n‚ö†Ô∏è  WARNING: No data extracted. This could mean:');
      console.log('   - LinkedIn blocked the scraper');
      console.log('   - Profile is private');
      console.log('   - Page structure changed');
      console.log('   - Check the browser window and linkedin-debug.png');
    }
    
  } catch (error) {
    console.error('\n‚ùå SCRAPER ERROR:');
    console.error(`Message: ${error.message}`);
    console.error(`Stack: ${error.stack}`);
    
    if (error.message.includes('Browser initialization failed')) {
      console.error('\nüîß SOLUTION: Install Puppeteer - npm install puppeteer');
    } else if (error.message.includes('redirected to login')) {
      console.error('\nüîß SOLUTION: Profile may be private or LinkedIn detected bot');
    } else if (error.message.includes('timeout')) {
      console.error('\nüîß SOLUTION: Check internet connection or increase timeout');
    }
  }
}

testEnhancedScraper();
