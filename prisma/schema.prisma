generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  name             String
  email            String          @unique
  password         String
  status           String          @default("active")
  resetToken       String?
  resetTokenExpiry DateTime?
  lastLogin        DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  role             String          @default("USER")
  cvs              CV[]            @relation("UserCVs")
  importSessions   ImportSession[] @relation("UserImportSessions")
  payments         Payment[]       @relation("UserPayments")
  subscriptions    Subscription[]  @relation("UserSubscriptions")
}

model CV {
  id         String              @id @default(uuid())
  userId     String
  title      String
  cv_data    Json
  templateId String?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  user       User                @relation("UserCVs", fields: [userId], references: [id])
  fileJobs   FileGenerationJob[] @relation("CVFileJobs")

  @@index([userId], map: "CV_userId_idx")
}

model Template {
  id          String   @id @default(uuid())
  name        String
  tier        String
  previewUrl  String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subscription {
  id          String   @id @default(uuid())
  userId      String
  tier        String
  status      String
  provider    String
  providerRef String?  @unique
  startedAt   DateTime @default(now())
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserSubscriptions", fields: [userId], references: [id])

  @@index([userId], map: "Subscription_userId_idx")
}

model Admin {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      String    @default("admin")
  active    Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ApiKey {
  id            String    @id @default(uuid())
  name          String
  key           String    @unique(map: "ApiKey_temp_key_key")
  service       String    @default("linkedin")
  active        Boolean   @default(true)
  priority      Int       @default(0)
  usageCount    Int       @default(0)
  lastUsed      DateTime?
  lastResult    String?
  deactivatedAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model FileGenerationJob {
  id        String   @id @default(uuid())
  cvId      String
  format    String
  status    String
  fileUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cv        CV       @relation("CVFileJobs", fields: [cvId], references: [id])

  @@index([cvId], map: "FileGenerationJob_cvId_idx")
}

model Payment {
  id            String   @id @default(uuid())
  userId        String
  amount        Float
  status        String
  transactionId String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  currency      String   @default("AZN")
  orderId       String   @unique
  paymentMethod String
  planType      String
  user          User     @relation("UserPayments", fields: [userId], references: [id])

  @@index([userId], map: "Payment_userId_idx")
}

model ImportSession {
  id        String   @id @default(uuid())
  userId    String
  type      String
  data      String   @db.Text
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserImportSessions", fields: [userId], references: [id])

  @@index([userId], map: "ImportSession_userId_idx")
}
