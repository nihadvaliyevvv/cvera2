const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addLinkedInApis() {
  try {
    console.log('üîë Adding LinkedIn scraping APIs to database...');

    // Add BrightData API (Primary)
    const brightDataKey = await prisma.apiKey.upsert({
      where: {
        service_apiKey: {
          service: 'brightdata',
          apiKey: 'da77d05e80aa038856c04cb0e96d34a267be39e89a46c03ed15e68b38353eaae'
        }
      },
      update: {
        active: true,
        priority: 1,
        dailyLimit: 1000
      },
      create: {
        service: 'brightdata',
        apiKey: 'da77d05e80aa038856c04cb0e96d34a267be39e89a46c03ed15e68b38353eaae',
        active: true,
        priority: 1,
        dailyLimit: 1000,
        usageCount: 0,
        dailyUsage: 0,
        lastResult: null
      }
    });

    console.log('‚úÖ BrightData API added/updated:', {
      id: brightDataKey.id,
      service: brightDataKey.service,
      active: brightDataKey.active,
      priority: brightDataKey.priority
    });

    // Add RapidAPI for skills (Secondary)
    const rapidApiKey = await prisma.apiKey.upsert({
      where: {
        service_apiKey: {
          service: 'rapidapi',
          apiKey: process.env.RAPIDAPI_KEY || 'your-rapidapi-key'
        }
      },
      update: {
        active: true,
        priority: 2,
        dailyLimit: 500
      },
      create: {
        service: 'rapidapi',
        apiKey: process.env.RAPIDAPI_KEY || 'your-rapidapi-key',
        active: true,
        priority: 2,
        dailyLimit: 500,
        usageCount: 0,
        dailyUsage: 0,
        lastResult: null
      }
    });

    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
// Run the setup
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
// Run the setup
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
// Run the setup
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
// Run the setup
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
    if (error.code === 'P2002') {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
// Run the setup
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
// Run the setup
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
// Run the setup
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
// Run the setup
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
// Run the setup
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
// Run the setup
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
// Run the setup
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
    if (error.code === 'P2002') {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
// Run the setup
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
// Run the setup
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
// Run the setup
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
// Run the setup
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Active: ${api.active}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
        where: {
          OR: [
            { service: 'scrapingdog' },
// Run the setup
          ]
        }
      });
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      existing.forEach(api => {
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
    }
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
            { service: 'brightdata' }
          ]
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
      console.log(`   Active: ${api.active}`);
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
// Run the setup
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
      console.log(`   Active: ${api.active}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });
            { service: 'brightdata' }
// Run the setup
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      console.log(`   Active: ${api.active}`);
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
      console.log(`   Priority: ${api.priority}`);
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
          { service: 'brightdata' }
      });
    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');
      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
// Run the setup
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
        OR: [
          { service: 'scrapingdog' },
          { service: 'brightdata' }
// Run the setup

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
    console.log('\nüìä LinkedIn APIs in database:');
    console.log('============================');

    allLinkedinApis.forEach((api, index) => {
      console.log(`\n${index + 1}. ${api.service.toUpperCase()}`);
      console.log(`   API Key: ${api.apiKey.substring(0, 8)}***`);
      console.log(`   Active: ${api.active}`);
      console.log(`   Priority: ${api.priority}`);
      console.log(`   Daily Limit: ${api.dailyLimit}`);

    // If unique constraint error, likely the APIs already exist
    if (error.code === 'P2002') {
      console.log('‚ÑπÔ∏è APIs may already exist. Checking current status...');

      const existing = await prisma.apiKey.findMany({
        where: {
          OR: [
            { service: 'scrapingdog' },
            { service: 'brightdata' }
          ]
        }
      });

      console.log(`üìä Found ${existing.length} existing LinkedIn APIs`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
      });
    }
      console.log(`   Usage Count: ${api.usageCount}`);
      console.log(`   Daily Usage: ${api.dailyUsage}`);
      existing.forEach(api => {
        console.log(`   ${api.service}: ${api.active ? '‚úÖ Active' : '‚ùå Inactive'}`);
    console.log('\n‚úÖ LinkedIn APIs setup completed successfully!');
    console.log('üîÑ Scraper will use ScrapingDog as primary and BrightData as fallback');
// Run the setup
  } finally {
    await prisma.$disconnect();
  }
}

// Run the setup
addLinkedInApis();
