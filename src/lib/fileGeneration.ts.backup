import puppeteer from 'puppeteer';
import { Document, Paragraph, TextRun, HeadingLevel, AlignmentType, Packer } from 'docx';
import { CVData, Experience, Education, Skill, Language, Project, Certification } from '@/types/cv';
import fs from 'fs';
import path from 'path';

interface FileGenerationOptions {
  format: 'pdf' | 'docx';
  cvData: CVData;
  templateId?: string;
}

export class FileGenerationService {
  private static async generatePDF(cvData: CVData, templateId?: string): Promise<Buffer> {
    const browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox'],
    });

    try {
      const page = await browser.newPage();
      
      // Generate HTML content for CV
      const htmlContent = this.generateHTMLContent(cvData, templateId);
      
      await page.setContent(htmlContent, {
        waitUntil: 'networkidle0',
      });

      // Generate PDF
      const pdf = await page.pdf({
        format: 'A4',
        printBackground: true,
        margin: {
          top: '0.5in',
          bottom: '0.5in',
          left: '0.5in',
          right: '0.5in',
        },
      });

      return Buffer.from(pdf);
    } finally {
      await browser.close();
    }
  }

  private static generateHTMLContent(cvData: CVData, templateId?: string): string {
    const { personalInfo, experience, education, skills, languages, projects, certifications, volunteerExperience, publications } = cvData;
    
    return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>CV - ${personalInfo.fullName}</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: 'Times New Roman', serif;
            font-size: 11pt;
            line-height: 1.4;
            color: #333;
            background: white;
        }
        .container {
            width: 794px;
            min-height: 1123px;
            margin: 0 auto;
            padding: 30px;
            background: white;
        }
        
        .cv-section {
            margin-bottom: 1.5rem;
        }
        
        .text-center {
            text-align: center;
        }
        
        .mb-8 {
            margin-bottom: 1.5rem;
        }
        
        h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 0.5rem;
            line-height: 1.2;
        }
        
        h2 {
            font-size: 1.5rem;
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.6rem;
            margin-top: 1.5rem;
            padding-bottom: 0.3rem;
            border-bottom: 2px solid #e5e7eb;
        }
        
        p {
            margin-bottom: 1rem;
            color: #4b5563;
        }
        
        .cv-contact-info {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: #f9fafb;
            border-radius: 0.5rem;
            justify-content: center;
        }
        
        .cv-contact-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #6b7280;
            font-size: 0.875rem;
            white-space: nowrap;
        }
        
        .cv-section-header {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
            padding-bottom: 0.2rem;
        }
        
        .cv-section-icon {
            font-size: 1.25rem;
        }
        
        .cv-section-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #1f2937;
        }
        
        .cv-experience-item {
            margin-bottom: 1.2rem;
            padding: 1rem;
            border-left: 3px solid #3b82f6;
            background: #f8fafc;
            border-radius: 0 0.5rem 0.5rem 0;
        }
        
        .cv-experience-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 0.5rem;
            gap: 1rem;
        }
        
        .cv-experience-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.25rem;
        }
        
        .cv-experience-company {
            font-size: 1rem;
            font-weight: 500;
            color: #3b82f6;
            margin-bottom: 0.25rem;
        }
        
        .cv-experience-date {
            font-size: 0.875rem;
            color: #6b7280;
            font-weight: 500;
        }
        
        .cv-experience-location {
            font-size: 0.875rem;
            color: #6b7280;
            font-style: italic;
        }
        
        .cv-experience-description {
            color: #4b5563;
            line-height: 1.6;
            margin-top: 0.5rem;
        }
        
        .cv-education-item {
            margin-bottom: 1.2rem;
            padding: 1rem;
            border-left: 3px solid #10b981;
            background: #f0fdf4;
            border-radius: 0 0.5rem 0.5rem 0;
        }
        
        .cv-education-degree {
            font-size: 1.125rem;
            font-weight: 600;
            color: #1f2937;
        }
        
        .cv-education-institution {
            font-size: 1rem;
            font-weight: 500;
            color: #10b981;
            margin-bottom: 0.25rem;
        }
        
        .cv-skills-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            width: 100%;
        }
        
        .cv-skill-category {
            background: #f3f4f6;
            padding: 1rem;
            border-radius: 0.5rem;
        }
        
        .cv-skill-category-title {
            font-size: 1rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.5rem;
        }
        
        .cv-skill-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.25rem 0;
            border-bottom: 1px solid #e5e7eb;
        }
        
        .cv-skill-item:last-child {
            border-bottom: none;
        }
        
        .cv-skill-name {
            font-weight: 500;
            color: #374151;
        }
        
        .cv-skill-level {
            font-size: 0.875rem;
            color: #6b7280;
            font-weight: 500;
        }
        
        .cv-languages-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 1rem;
            width: 100%;
        }
        
        .cv-language-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
            background: #f3f4f6;
            border-radius: 0.5rem;
        }
        
        .cv-project-item {
            margin-bottom: 1.2rem;
            padding: 1rem;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            background: #fafafa;
        }
        
        .cv-project-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.5rem;
        }
        
        .cv-project-description {
            color: #4b5563;
            margin-bottom: 0.75rem;
        }
        
        .cv-project-technologies {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
        }
        
        .cv-project-tech {
            background: #dbeafe;
            color: #1e40af;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.875rem;
            font-weight: 500;
        }
        
        .cv-certification-item {
            margin-bottom: 1rem;
            padding: 1rem;
            border-left: 3px solid #f59e0b;
            background: #fffbeb;
            border-radius: 0 0.5rem 0.5rem 0;
        }
        
        .cv-certification-name {
            font-size: 1rem;
            font-weight: 600;
            color: #1f2937;
        }
        
        .cv-certification-issuer {
            font-size: 0.875rem;
            font-weight: 500;
            color: #f59e0b;
            margin-bottom: 0.25rem;
        }
        
        .cv-certification-date {
            font-size: 0.875rem;
            color: #6b7280;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header Section -->
        <div class="cv-section">
            <div class="text-center mb-8">
                <h1>${personalInfo.fullName || ''}</h1>
                <div class="cv-contact-info">
                    ${personalInfo.email ? `
                        <div class="cv-contact-item">
                            <span>üìß</span>
                            <span>${personalInfo.email}</span>
                        </div>
                    ` : ''}
                    ${personalInfo.phone ? `
                        <div class="cv-contact-item">
                            <span>üìû</span>
                            <span>${personalInfo.phone}</span>
                        </div>
                    ` : ''}
                    ${personalInfo.location ? `
                        <div class="cv-contact-item">
                            <span>üìç</span>
                            <span>${personalInfo.location}</span>
                        </div>
                    ` : ''}
                    ${personalInfo.linkedin ? `
                        <div class="cv-contact-item">
                            <span>üîó</span>
                            <span>LinkedIn</span>
                        </div>
                    ` : ''}
                    ${personalInfo.website ? `
                        <div class="cv-contact-item">
                            <span>üåê</span>
                            <span>Website</span>
                        </div>
                    ` : ''}
                </div>
            </div>
            
            ${personalInfo.summary ? `
                <div class="cv-section">
                    <div class="cv-section-header">
                        <div class="cv-section-icon">üìù</div>
                        <h2 class="cv-section-title">Summary</h2>
                    </div>
                    <p>${personalInfo.summary}</p>
                </div>
            ` : ''}
        </div>

        ${experience && experience.length > 0 ? `
            <div class="cv-section">
                <div class="cv-section-header">
                    <div class="cv-section-icon">üíº</div>
                    <h2 class="cv-section-title">Work Experience</h2>
                </div>
                ${experience.map(exp => `
                    <div class="cv-experience-item">
                        <div class="cv-experience-header">
                            <div>
                                <div class="cv-experience-title">${exp.position || ''}</div>
                                <div class="cv-experience-company">${exp.company || ''}</div>
                                ${exp.location ? `<div class="cv-experience-location">${exp.location}</div>` : ''}
                            </div>
                            <div class="cv-experience-date">
                                ${exp.startDate || ''} - ${exp.current ? 'Present' : exp.endDate || ''}
                            </div>
                        </div>
                        ${exp.description ? `<div class="cv-experience-description">${exp.description}</div>` : ''}
                    </div>
                `).join('')}
            </div>
        ` : ''}

        ${education && education.length > 0 ? `
            <div class="cv-section">
                <div class="cv-section-header">
                    <div class="cv-section-icon">üéì</div>
                    <h2 class="cv-section-title">Education</h2>
                </div>
                ${education.map(edu => `
                    <div class="cv-education-item">
                        <div class="cv-education-degree">${edu.degree || ''}</div>
                        <div class="cv-education-institution">${edu.institution || ''}</div>
                        <div class="cv-experience-date">
                            ${edu.startDate || ''} - ${edu.current ? 'Present' : edu.endDate || ''}
                        </div>
                    </div>
                `).join('')}
            </div>
        ` : ''}

        ${skills && skills.length > 0 ? `
            <div class="cv-section">
                <div class="cv-section-header">
                    <div class="cv-section-icon">üõ†Ô∏è</div>
                    <h2 class="cv-section-title">Skills</h2>
                </div>
                <div class="cv-skills-grid">
                    ${skills.map(skill => `
                        <div class="cv-skill-category">
                            <div class="cv-skill-category-title">${skill.category || 'Skills'}</div>
                            ${skill.items && Array.isArray(skill.items) ? 
                                skill.items.map(item => `
                                    <div class="cv-skill-item">
                                        <span class="cv-skill-name">${item || ''}</span>
                                    </div>
                                `).join('') : 
                                `<div class="cv-skill-item">
                                    <span class="cv-skill-name">${skill.name || ''}</span>
                                    ${skill.level ? `<span class="cv-skill-level">${skill.level}</span>` : ''}
                                </div>`
                            }
                        </div>
                    `).join('')}
                </div>
            </div>
        ` : ''}

        ${languages && languages.length > 0 ? `
            <div class="cv-section">
                <div class="cv-section-header">
                    <div class="cv-section-icon">üåç</div>
                    <h2 class="cv-section-title">Languages</h2>
                </div>
                <div class="cv-languages-grid">
                    ${languages.map(lang => `
                        <div class="cv-language-item">
                            <span>${lang.language || lang.name || ''}</span>
                            <span class="cv-skill-level">${lang.level || ''}</span>
                        </div>
                    `).join('')}
                </div>
            </div>
        ` : ''}

        ${projects && projects.length > 0 ? `
            <div class="cv-section">
                <div class="cv-section-header">
                    <div class="cv-section-icon">üöÄ</div>
                    <h2 class="cv-section-title">Projects</h2>
                </div>
                ${projects.map(project => `
                    <div class="cv-project-item">
                        <div class="cv-project-title">${project.name || ''}</div>
                        ${project.description ? `<div class="cv-project-description">${project.description}</div>` : ''}
                        ${project.technologies && Array.isArray(project.technologies) && project.technologies.length > 0 ? `
                            <div class="cv-project-technologies">
                                ${project.technologies.map(tech => `<span class="cv-project-tech">${tech || ''}</span>`).join('')}
                            </div>
                        ` : ''}
                    </div>
                `).join('')}
            </div>
        ` : ''}

        ${certifications && certifications.length > 0 ? `
            <div class="cv-section">
                <div class="cv-section-header">
                    <div class="cv-section-icon">üèÜ</div>
                    <h2 class="cv-section-title">Certifications</h2>
                </div>
                ${certifications.map(cert => `
                    <div class="cv-certification-item">
                        <div class="cv-certification-name">${cert.name || ''}</div>
                        <div class="cv-certification-issuer">${cert.issuer || ''}</div>
                        <div class="cv-certification-date">${cert.date || ''}</div>
                    </div>
                `).join('')}
            </div>
        ` : ''}

        ${volunteerExperience && volunteerExperience.length > 0 ? `
            <div class="cv-section">
                <div class="cv-section-header">
                    <div class="cv-section-icon">‚ù§Ô∏è</div>
                    <h2 class="cv-section-title">Volunteer Experience</h2>
                </div>
                ${volunteerExperience.map(vol => `
                    <div class="cv-experience-item">
                        <div class="cv-experience-header">
                            <div>
                                <div class="cv-experience-title">${vol.role || ''}</div>
                                <div class="cv-experience-company">${vol.organization || ''}</div>
                                ${vol.cause ? `<div class="cv-experience-location">${vol.cause}</div>` : ''}
                            </div>
                            <div class="cv-experience-date">
                                ${vol.startDate || ''} - ${vol.current ? 'Present' : vol.endDate || ''}
                            </div>
                        </div>
                        ${vol.description ? `<div class="cv-experience-description">${vol.description}</div>` : ''}
                    </div>
                `).join('')}
            </div>
        ` : ''}

        ${publications && publications.length > 0 ? `
            <div class="cv-section">
                <div class="cv-section-header">
                    <div class="cv-section-icon">üìö</div>
                    <h2 class="cv-section-title">Publications</h2>
                </div>
                ${publications.map(pub => `
                    <div class="cv-experience-item">
                        <div class="cv-experience-header">
                            <div>
                                <div class="cv-experience-title">${pub.title || ''}</div>
                                ${pub.publisher ? `<div class="cv-experience-company">${pub.publisher}</div>` : ''}
                                ${pub.authors && pub.authors.length > 0 ? `
                                    <div class="cv-experience-location">Authors: ${pub.authors.join(', ')}</div>
                                ` : ''}
                            </div>
                            ${pub.date ? `<div class="cv-experience-date">${pub.date}</div>` : ''}
                        </div>
                        ${pub.description ? `<div class="cv-experience-description">${pub.description}</div>` : ''}
                        ${pub.url ? `
                            <div class="cv-experience-location">
                                <a href="${pub.url}" target="_blank" rel="noopener noreferrer">${pub.url}</a>
                            </div>
                        ` : ''}
                    </div>
                `).join('')}
            </div>
        ` : ''}
    </div>
</body>
</html>
    `;
  }

  private static async generateDOCX(cvData: CVData): Promise<Buffer> {
        }
        .projects-grid {
            display: grid;
            gap: 20px;
        }
        .project-item {
            background: #f9fafb;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #3b82f6;
        }
        .project-item .tech-stack {
            margin-top: 10px;
            font-size: 0.9rem;
            color: #6b7280;
        }
        .project-item .tech-stack strong {
            color: #374151;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>${personalInfo.fullName}</h1>
            <div class="contact-info">
                <div class="contact-item">
                    <span>üìß</span>
                    <span>${personalInfo.email}</span>
                </div>
                <div class="contact-item">
                    <span>üì±</span>
                    <span>${personalInfo.phone}</span>
                </div>
                <div class="contact-item">
                    <span>üìç</span>
                    <span>${personalInfo.location}</span>
                </div>
            </div>
        </div>

        ${personalInfo.summary ? `
        <div class="section">
            <h2>Haqqƒ±mda</h2>
            <p>${personalInfo.summary}</p>
        </div>
        ` : ''}

        ${experience && experience.length > 0 ? `
        <div class="section">
            <h2>T…ôcr√ºb…ô</h2>
            ${experience.map(exp => `
                <div class="experience-item">
                    <h3>${exp.position}</h3>
                    <div class="company">${exp.company}</div>
                    <div class="duration">${exp.startDate} - ${exp.endDate || 'Hazƒ±rda'}</div>
                    ${exp.description ? `<div class="description">${exp.description}</div>` : ''}
                </div>
            `).join('')}
        </div>
        ` : ''}

        ${education && education.length > 0 ? `
        <div class="section">
            <h2>T…ôhsil</h2>
            ${education.map(edu => `
                <div class="education-item">
                    <h3>${edu.degree}</h3>
                    <div class="institution">${edu.institution}</div>
                    <div class="duration">${edu.startDate} - ${edu.endDate || 'Hazƒ±rda'}</div>
                </div>
            `).join('')}
        </div>
        ` : ''}

        ${skills && skills.length > 0 ? `
        <div class="section">
            <h2>Bacarƒ±qlar</h2>
            <div class="skills-grid">
                ${skills.map(skill => `
                    <div class="skill-category">
                        <h4>${skill.category}</h4>
                        <ul class="skill-list">
                            ${skill.items.map(item => `<li>${item}</li>`).join('')}
                        </ul>
                    </div>
                `).join('')}
            </div>
        </div>
        ` : ''}

        ${languages && languages.length > 0 ? `
        <div class="section">
            <h2>Dill…ôr</h2>
            <div class="languages-grid">
                ${languages.map(lang => `
                    <div class="language-item">
                        <span>${lang.language}</span>
                        <span class="language-level">${lang.level}</span>
                    </div>
                `).join('')}
            </div>
        </div>
        ` : ''}

        ${projects && projects.length > 0 ? `
        <div class="section">
            <h2>Layih…ôl…ôr</h2>
            <div class="projects-grid">
                ${projects.map(project => `
                    <div class="project-item">
                        <h3>${project.name}</h3>
                        ${project.description ? `<div class="description">${project.description}</div>` : ''}
                        ${project.technologies && project.technologies.length > 0 ? `
                            <div class="tech-stack">
                                <strong>Texnologiyalar:</strong> ${project.technologies.join(', ')}
                            </div>
                        ` : ''}
                    </div>
                `).join('')}
            </div>
        </div>
        ` : ''}

        ${certifications && certifications.length > 0 ? `
        <div class="section">
            <h2>Sertifikatlar</h2>
            ${certifications.map(cert => `
                <div class="cert-item">
                    <h3>${cert.name}</h3>
                    <div class="issuer">${cert.issuer}</div>
                    <div class="date">${cert.date}</div>
                </div>
            `).join('')}
        </div>
        ` : ''}
    </div>
</body>
</html>
    `;
  }

  private static async generateDOCX(cvData: CVData): Promise<Buffer> {
    const { personalInfo, experience, education, skills, languages, projects, certifications } = cvData;
    
    const doc = new Document({
      sections: [
        {
          properties: {},
          children: [
            // Header
            new Paragraph({
              children: [
                new TextRun({
                  text: personalInfo.fullName,
                  size: 32,
                  bold: true,
                  color: '1e40af',
                }),
              ],
              alignment: AlignmentType.CENTER,
              spacing: { after: 200 },
            }),
            
            // Contact Info
            new Paragraph({
              children: [
                new TextRun({
                  text: `üìß ${personalInfo.email} | üì± ${personalInfo.phone} | üìç ${personalInfo.location}`,
                  size: 22,
                }),
              ],
              alignment: AlignmentType.CENTER,
              spacing: { after: 400 },
            }),

            // Summary
            ...(personalInfo.summary ? [
              new Paragraph({
                children: [
                  new TextRun({
                    text: 'Haqqƒ±mda',
                    size: 24,
                    bold: true,
                    color: '1e40af',
                  }),
                ],
                heading: HeadingLevel.HEADING_2,
                spacing: { before: 200, after: 100 },
              }),
              new Paragraph({
                children: [
                  new TextRun({
                    text: personalInfo.summary,
                    size: 22,
                  }),
                ],
                spacing: { after: 200 },
              }),
            ] : []),

            // Experience
            ...(experience && experience.length > 0 ? [
              new Paragraph({
                children: [
                  new TextRun({
                    text: 'T…ôcr√ºb…ô',
                    size: 24,
                    bold: true,
                    color: '1e40af',
                  }),
                ],
                heading: HeadingLevel.HEADING_2,
                spacing: { before: 200, after: 100 },
              }),
              ...experience.flatMap(exp => [
                new Paragraph({
                  children: [
                    new TextRun({
                      text: exp.position,
                      size: 22,
                      bold: true,
                    }),
                  ],
                  spacing: { before: 100, after: 50 },
                }),
                new Paragraph({
                  children: [
                    new TextRun({
                      text: `${exp.company} | ${exp.startDate} - ${exp.endDate || 'Hazƒ±rda'}`,
                      size: 20,
                      italics: true,
                    }),
                  ],
                  spacing: { after: 50 },
                }),
                ...(exp.description ? [
                  new Paragraph({
                    children: [
                      new TextRun({
                        text: exp.description,
                        size: 20,
                      }),
                    ],
                    spacing: { after: 100 },
                  }),
                ] : []),
              ]),
            ] : []),

            // Education
            ...(education && education.length > 0 ? [
              new Paragraph({
                children: [
                  new TextRun({
                    text: 'T…ôhsil',
                    size: 24,
                    bold: true,
                    color: '1e40af',
                  }),
                ],
                heading: HeadingLevel.HEADING_2,
                spacing: { before: 200, after: 100 },
              }),
              ...education.flatMap(edu => [
                new Paragraph({
                  children: [
                    new TextRun({
                      text: edu.degree,
                      size: 22,
                      bold: true,
                    }),
                  ],
                  spacing: { before: 100, after: 50 },
                }),
                new Paragraph({
                  children: [
                    new TextRun({
                      text: `${edu.institution} | ${edu.startDate} - ${edu.endDate || 'Hazƒ±rda'}`,
                      size: 20,
                      italics: true,
                    }),
                  ],
                  spacing: { after: 100 },
                }),
              ]),
            ] : []),

            // Skills
            ...(skills && skills.length > 0 ? [
              new Paragraph({
                children: [
                  new TextRun({
                    text: 'Bacarƒ±qlar',
                    size: 24,
                    bold: true,
                    color: '1e40af',
                  }),
                ],
                heading: HeadingLevel.HEADING_2,
                spacing: { before: 200, after: 100 },
              }),
              ...skills.flatMap(skill => [
                new Paragraph({
                  children: [
                    new TextRun({
                      text: skill.category,
                      size: 22,
                      bold: true,
                    }),
                  ],
                  spacing: { before: 100, after: 50 },
                }),
                new Paragraph({
                  children: [
                    new TextRun({
                      text: skill.items.join(', '),
                      size: 20,
                    }),
                  ],
                  spacing: { after: 100 },
                }),
              ]),
            ] : []),
          ],
        },
      ],
    });

    return Buffer.from(await Packer.toBuffer(doc));
  }

  static async generateFile(options: FileGenerationOptions): Promise<Buffer> {
    const { format, cvData } = options;
    
    if (format === 'pdf') {
      return await this.generatePDF(cvData, options.templateId);
    } else if (format === 'docx') {
      return await this.generateDOCX(cvData);
    } else {
      throw new Error('Unsupported format');
    }
  }
}

export default FileGenerationService;
