import { NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function POST(request: Request) {
  try {
    console.log('ðŸšª Logout API Ã§aÄŸÄ±rÄ±ldÄ±');

    // Token-i header vÉ™ cookie-dÉ™n É™ldÉ™ et
    const authHeader = request.headers.get('authorization');
    const headerToken = authHeader?.replace('Bearer ', '') || null;

    // Cookie-dÉ™n dÉ™ token yoxla
    const cookies = request.headers.get('cookie');
    const cookieToken = cookies?.split(';')
      .find(c => c.trim().startsWith('auth-token='))
      ?.split('=')[1] ||
      cookies?.split(';')
      .find(c => c.trim().startsWith('accessToken='))
      ?.split('=')[1] || null;

    const token = headerToken || cookieToken;
    let userId: string | null = null;

    if (token) {
      try {
        const jwt = require('jsonwebtoken');
        const decoded = jwt.decode(token) as any;

        if (decoded?.userId) {
          userId = decoded.userId;
          console.log(`ðŸ”“ Ä°stifadÉ™Ã§i Ã§Ä±xÄ±r: ${userId}`);

          // Ä°stifadÉ™Ã§i mÉ™lumatlarÄ±nÄ± tÉ™mizlÉ™ - tam logout Ã¼Ã§Ã¼n
          await prisma.user.update({
            where: { id: decoded.userId },
            data: {
              lastLogin: null, // YenidÉ™n authentication mÉ™cburi etmÉ™k Ã¼Ã§Ã¼n
            }
          }).catch(error => {
            console.error('User update error:', error);
            // XÉ™ta olsa belÉ™ logout davam etsin
          });
        }
      } catch (error) {
        console.error('Token decode error:', error);
        // Token decode xÉ™tasÄ± olsa belÉ™ logout davam etsin
      }
    }

    const response = NextResponse.json({
      message: "UÄŸurla hesabdan Ã§Ä±xÄ±ÅŸ edildi",
      timestamp: new Date().toISOString(),
      cleared: true,
      userId: userId || 'namÉ™lum',
      sessionTerminated: true
    });

    // BÃ¼tÃ¼n mÃ¼mkÃ¼n authentication cookie-lÉ™rini tÉ™mizlÉ™
    const cookiesToClear = [
      "auth-token",
      "accessToken",
      "refreshToken",
      "session",
      "token",
      "cvera-auth",
      "cvera-token",
      "next-auth.session-token",
      "next-auth.csrf-token",
      "user-session",
      "jwt-token",
      "sessionToken"
    ];

    // MÃ¼xtÉ™lif path vÉ™ domain-lÉ™r Ã¼Ã§Ã¼n cookie-lÉ™ri tÉ™mizlÉ™
    const paths = ["/", "/api", "/auth", "/dashboard", "/admin"];
    const domains = [undefined, ".cvera.net", "cvera.net", "localhost"];

    cookiesToClear.forEach(cookieName => {
      paths.forEach(path => {
        domains.forEach(domain => {
          const cookieOptions: any = {
            httpOnly: true,
            secure: process.env.NODE_ENV === "production",
            sameSite: "lax",
            path: path,
            maxAge: 0,
            expires: new Date(0),
          };

          if (domain && domain !== "localhost") {
            cookieOptions.domain = domain;
          }

          response.cookies.set(cookieName, "", cookieOptions);
        });
      });
    });

    // Komprehensiv cache control header-lÉ™ri É™lavÉ™ et
    response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate, private, max-age=0');
    response.headers.set('Pragma', 'no-cache');
    response.headers.set('Expires', '0');
    response.headers.set('Clear-Site-Data', '"cache", "cookies", "storage"');

    console.log('âœ… Logout API uÄŸurla tamamlandÄ±');
    return response;

  } catch (error) {
    console.error('Logout API xÉ™tasÄ±:', error);

    // XÉ™ta olsa belÉ™, cookie-lÉ™ri tÉ™mizlÉ™mÉ™yÉ™ Ã§alÄ±ÅŸ
    const response = NextResponse.json({
      message: "Ã‡Ä±xÄ±ÅŸ zamanÄ± xÉ™ta baÅŸ verdi, lakin tÉ™mizlÉ™ndi",
      error: error instanceof Error ? error.message : "NamÉ™lum xÉ™ta",
      timestamp: new Date().toISOString(),
      cleared: true
    }, { status: 200 }); // Logout Ã¼Ã§Ã¼n hÉ™lÉ™ dÉ™ 200 qaytar

    // TÉ™cili cookie tÉ™mizliyi
    const cookiesToClear = ["auth-token", "accessToken", "refreshToken", "session", "token"];
    cookiesToClear.forEach(cookieName => {
      response.cookies.set(cookieName, "", {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "lax",
        path: "/",
        maxAge: 0,
        expires: new Date(0),
      });
    });

    return response;
  } finally {
    await prisma.$disconnect();
  }
}
