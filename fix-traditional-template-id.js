const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixTraditionalTemplateId() {
  try {
    console.log('üîß "∆èn…ôn…ôvi CV" template ID-ni d√ºz…ôltir…ôm...\n');

    // ∆èvv…ôlc…ô m√∂vcud template-i tap
    const existingTemplate = await prisma.template.findFirst({
      where: {
        OR: [
          { name: '∆èn…ôn…ôvi CV' },
          { id: '8b26fb4c-7ec1-4c0d-bbd9-4b597fb1df45' }
        ]
      }
    });

    if (!existingTemplate) {
      console.log('‚ùå "∆èn…ôn…ôvi CV" template-i tapƒ±lmadƒ±!');
      return;
    }

    console.log('üìã M√∂vcud template:', {
      id: existingTemplate.id,
      name: existingTemplate.name,
      tier: existingTemplate.tier
    });

    // ∆èg…ôr ID artƒ±q "traditional" deyils…ô, onu d…ôyi≈üdir
    if (existingTemplate.id !== 'traditional') {
      console.log('\nüîÑ Template ID-ni "traditional" olaraq yenil…ôyir…ôm...');

      // ∆èvv…ôlc…ô "traditional" ID-li template var-yoxdu yoxla
      const traditionalExists = await prisma.template.findUnique({
        where: { id: 'traditional' }
      });

      if (traditionalExists) {
        console.log('‚ö†Ô∏è "traditional" ID-li template artƒ±q m√∂vcuddur, k√∂hn…ôsini silir…ôm...');
        await prisma.template.delete({
          where: { id: 'traditional' }
        });
      }

      // Yeni template yarat "traditional" ID il…ô
      const newTemplate = await prisma.template.create({
        data: {
          id: 'traditional',
          name: '∆èn…ôn…ôvi CV',
          tier: 'Free',
          previewUrl: '/templates/traditional-preview.jpg',
          description: 'Klassik v…ô pe≈ü…ôkar dizaynlƒ± …ôn…ôn…ôvi CV ≈üablonu. T√ºnd yan panel v…ô aƒü …ôsas sah…ô il…ô hazƒ±rlanmƒ±≈ü Resume1 faylƒ±ndan.',
        }
      });

      // K√∂hn…ô template-i sil
      await prisma.template.delete({
        where: { id: existingTemplate.id }
      });

      console.log('‚úÖ Template ID uƒüurla yenil…ôndi!');
      console.log('üìã Yeni template m…ôlumatlarƒ±:', {
        id: newTemplate.id,
        name: newTemplate.name,
        tier: newTemplate.tier,
        previewUrl: newTemplate.previewUrl
      });

    } else {
      console.log('‚úÖ Template ID artƒ±q d√ºzg√ºnd√ºr: "traditional"');
    }

    // Son yoxlama - b√ºt√ºn template-l…ôri g√∂st…ôr
    console.log('\nüìä B√ºt√ºn template-l…ôr:');
    const allTemplates = await prisma.template.findMany({
      orderBy: { createdAt: 'desc' }
    });

    allTemplates.forEach((template, index) => {
      console.log(`   ${index + 1}. ${template.name} (ID: ${template.id}) - ${template.tier}`);
    });

  } catch (error) {
    console.error('‚ùå X…ôta ba≈ü verdi:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Template ID-ni d√ºz…ôlt
fixTraditionalTemplateId()
  .then(() => {
    console.log('\nüéâ "∆èn…ôn…ôvi CV" template ID d√ºz…ôldildi v…ô hazƒ±rdƒ±r!');
    console.log('\nüìã Test √º√ß√ºn:');
    console.log('   1. Browser-d…ô http://localhost:3002/templates a√ßƒ±n');
    console.log('   2. "∆èn…ôn…ôvi CV" template-ini se√ßin');
    console.log('   3. CV yaradƒ±n v…ô preview-d…ô tam formada g√∂r√ºnm…ôsini yoxlayƒ±n');
  })
  .catch((error) => {
    console.error('‚ùå Template ID d√ºz…ôldil…ô bilm…ôdi:', error.message);
    process.exit(1);
  });
